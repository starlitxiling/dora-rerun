name: Build and Publish Dora C/C++ API

on:
  release:
    types: [published]
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-and-release:
    name: Build and Release C API
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            targets: >-
              x86_64-unknown-linux-gnu
              x86_64-unknown-linux-musl
              aarch64-unknown-linux-gnu
              aarch64-unknown-linux-musl
              armv7-unknown-linux-musleabihf
              i686-unknown-linux-gnu
          - os: macos-latest
            targets: >-
              x86_64-apple-darwin
              aarch64-apple-darwin
          - os: windows-latest
            targets: x86_64-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Detect target triplet
        id: triplet
        shell: bash
        run: |
          TRIPLET=$(rustc -vV | grep 'host:' | awk '{print $2}')
          echo "TRIPLET=$TRIPLET" >> $GITHUB_ENV
          echo "Detected triplet: $TRIPLET"

      - name: Build and generate artifacts
        run: |
          # Build libraries
          cargo build --release -p dora-node-api-c
          cargo build --release -p dora-operator-api-c
          cargo build --release -p dora-node-api-cxx
          cargo build --release -p dora-operator-api-cxx
          
          # Generate example headers (关键修复点)
          cargo run --example cxx-dataflow --release

      - name: Package artifacts
        shell: bash
        run: |
          mkdir -p dist/{include,lib}

          echo "Copying headers..."
          # From cxxbridge
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp apis\\c\\node\\*.h dist\\include\\ || echo "No headers found"
            cp apis\\c\\operator\\*.h dist\\include\\ || echo "No headers found"
            cp target\\cxxbridge\\dora-node-api-cxx\\*.h dist\\include\\ || echo "No cxxbridge headers found"
            cp examples\\c++-dataflow\\build\\*.h dist\\include\\ || echo "No example headers found"
            cp example\\c++-dataflow\\operator-rust-api\\operator.h dist\\include\\ || echo "No headers found"
          else
            cp apis/c/node/*.h dist/include || echo "No headers found"
            cp apis/c/operator/*.h dist/include || echo "No headers found"
            cp target/cxxbridge/dora-node-api-cxx/*.h dist/include/ || echo "No cxxbridge headers found"
            cp examples/c++-dataflow/build/*.h dist/include/ || echo "No example headers found"
            cp example/c++-dataflow/operator-rust-api/operator.h || echo "No headers found"
          fi

          case "$RUNNER_OS" in
            "Linux")
              cp target/release/libdora_node_api_c.a dist/lib/
              cp target/release/libdora_operator_api_c.a dist/lib/
              ;;
            "macOS")
              cp target/release/libdora_node_api_c.a dist/lib/
              cp target/release/libdora_operator_api_c.a dist/lib/
              ;;
            "Windows")
              cp target\\release\\dora_node_api_c.dll dist\\lib\\ || cp target\\release\\dora_node_api_c.lib dist\\lib\\
              cp target\\release\\dora_operator_api_c.dll dist\\lib\\ || cp target\\release\\dora_operator_api_c.lib dist\\lib\\
              ;;
          esac

          echo "Directory structure:"
          ls -R dist/

      - name: Create archive
        shell: bash
        run: |
          if [[ "$GITHUB_EVENT_NAME" == "release" ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v-latest"
          fi
          
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ARCHIVE_NAME="dora-${VERSION}-${{ env.TRIPLET }}.zip"
            powershell Compress-Archive -Path 'dist\*' -DestinationPath "$ARCHIVE_NAME"
          else
            ARCHIVE_NAME="dora-c-api-${VERSION}-${{ env.TRIPLET }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" -C dist .
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      - name: Upload release asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream