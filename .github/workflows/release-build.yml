name: Build and Publish Dora C API

on:
  release:
    types:
      - "published"
  workflow_dispatch:
  push:
    branches:
      - main
        
jobs:
  build-and-release:
    name: Build and Release C API (${ { matrix.os }} )
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  # 在三种OS下并行运行

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Build Dora C API crates
        run: |
          cargo build -p dora-node-api-c --release
          cargo build -p dora-operator-api-c --release
          cargo build -p dora-node-api-cxx --release
          cargo build -p dora-operator-api-cxx --release
        # 上述命令将编译所有相关库，并生成静态/动态库和头文件

      - name: Package headers and libraries
        shell: bash
        run: |
          echo "创建 dist/include dist/lib 目录..."
          mkdir -p dist/include dist/lib

          echo "复制 cxxbridge 生成的头文件..."
          cp target/cxxbridge/dora-node-api-cxx/src/*.h dist/include/ 2>/dev/null || true
          cp target/cxxbridge/dora-operator-api-cxx/src/*.h dist/include/ 2>/dev/null || true

          echo "根据 RUNNER_OS 选择复制库文件..."
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            cp target/release/libdora_node_api_c.* dist/lib/ 2>/dev/null || true
            cp target/release/libdora_operator_api_c.* dist/lib/ 2>/dev/null || true
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cp target/release/libdora_node_api_c.* dist/lib/ 2>/dev/null || true
            cp target/release/libdora_operator_api_c.* dist/lib/ 2>/dev/null || true
          else
            # Windows + Git Bash
            # 先尝试复制 DLL，若不存在则复制 LIB
            cp target/release/dora_node_api_c.dll dist/lib/dora-node-api-c.dll 2>/dev/null \
              || cp target/release/dora_node_api_c.lib dist/lib/dora-node-api-c.lib
            cp target/release/dora_operator_api_c.dll dist/lib/dora-operator-api-c.dll 2>/dev/null \
              || cp target/release/dora_operator_api_c.lib dist/lib/dora-operator-api-c.lib
          fi

          echo "打包文件已放入 dist/ 目录。"


      - name: Create archive
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ARCHIVE_NAME="dora-c-api-${{ matrix.os }}.zip"
            if ! powershell Compress-Archive -Path 'dist\*' -DestinationPath "$ARCHIVE_NAME" -ErrorAction Stop; then
              echo "Failed to create zip archive"
              exit 1
            fi
          else
            ARCHIVE_NAME="dora-c-api-${{ matrix.os }}.tar.gz"
            if ! tar -czf "$ARCHIVE_NAME" -C dist .; then
              echo "Failed to create tar.gz archive"
              exit 1
            fi
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV
        shell: bash

      - name: Upload release asset
        if: github.event_name == 'release'  # 只在发布时上传
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream
