name: Build and Publish Dora C/C++ API

on:
  release:
    types: "published"
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-and-release:
    name: Build and Release (OS: ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Rust toolchain with required components
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Detect target triplet for archive naming
      - name: Detect target triplet
        id: triplet
        shell: bash
        run: |
          # Get target triplet using rustc (more accurate)
          TRIPLET=$(rustc -vV | grep 'host:' | awk '{print $2}')
          echo "TRIPLET=$TRIPLET" >> $GITHUB_ENV
          echo "Detected triplet: $TRIPLET"

      # Build all required Rust crates in release mode
      - name: Build C/C++ API crates
        run: |
          cargo build --release -p dora-node-api-c
          cargo build --release -p dora-operator-api-c
          cargo build --release -p dora-node-api-cxx
          cargo build --release -p dora-operator-api-cxx

      # Package headers and compiled libraries
      - name: Package artifacts
        shell: bash
        run: |
          # Create standard directory structure
          mkdir -p dist/{include,lib}

          # Copy C API headers
          echo "Copying C header files..."
          cp crates/dora-node-api-c/include/*.h dist/include/
          cp crates/dora-operator-api-c/include/*.h dist/include/

          # Copy C++ bridge headers generated by cxx
          echo "Copying C++ bridge headers..."
          cp target/cxxbridge/dora-node-api-cxx/src/*.h dist/include/
          cp target/cxxbridge/dora-operator-api-cxx/src/*.h dist/include/

          # Platform-specific library handling
          case "$RUNNER_OS" in
            "Linux")
              # Linux: .a (static) and .so (dynamic) libraries
              echo "Processing Linux libraries..."
              cp target/release/libdora_node_api_c*.{a,so} dist/lib/
              cp target/release/libdora_operator_api_c*.{a,so} dist/lib/
              cp target/release/libdora_node_api_cxx*.{a,so} dist/lib/
              ;;
            "macOS")
              # macOS: .a (static) and .dylib (dynamic) libraries
              echo "Processing macOS libraries..."
              cp target/release/libdora_node_api_c*.{a,dylib} dist/lib/
              cp target/release/libdora_operator_api_c*.{a,dylib} dist/lib/
              cp target/release/libdora_node_api_cxx*.{a,dylib} dist/lib/
              ;;
            "Windows")
              # Windows: .dll (dynamic) and .lib (import) libraries
              echo "Processing Windows libraries..."
              cp target/release/dora_node_api_c.dll dist/lib/ 2>/dev/null || cp target/release/dora_node_api_c.lib dist/lib/
              cp target/release/dora_operator_api_c.dll dist/lib/ 2>/dev/null || cp target/release/dora_operator_api_c.lib dist/lib/
              cp target/release/dora_node_api_cxx.dll dist/lib/ 2>/dev/null || cp target/release/dora_node_api_cxx.lib dist/lib/
              ;;
          esac

          # Verify packaged content
          echo "Final dist directory structure:"
          tree dist/

      # Create platform-specific archive
      - name: Create distribution archive
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows: Create ZIP archive
            ARCHIVE_NAME="dora-cpp-api-${{ env.TRIPLET }}.zip"
            powershell Compress-Archive -Path 'dist\*' -DestinationPath "$ARCHIVE_NAME"
          else
            # Linux/macOS: Create tar.gz archive
            ARCHIVE_NAME="dora-cpp-api-${{ env.TRIPLET }}.tar.gz"
            tar -czf "$ARCHIVE_NAME" -C dist .
          fi
          echo "ARCHIVE_NAME=$ARCHIVE_NAME" >> $GITHUB_ENV

      # Upload to GitHub release
      - name: Upload release asset
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ env.ARCHIVE_NAME }}
          asset_name: ${{ env.ARCHIVE_NAME }}
          asset_content_type: application/octet-stream